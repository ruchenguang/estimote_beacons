package com.huaban.indoorlocation;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;

public class MySfvCallback implements Callback {
	private final String TAG = "Indoor Location::SurfaceView";
	private final Context context;
	
	private int xGridNum = 18;
	
	private int middleX;
	private int middleY;
	private int w, h;
	private int gridWidth;
	
	public MySfvCallback(Context context) {
		// TODO Auto-generated constructor stub
		this.context = context;
	}
	
	private void init(SurfaceHolder sfh){
		w = sfh.getSurfaceFrame().width();
		h = sfh.getSurfaceFrame().height();
		gridWidth = w/xGridNum;
		middleX = w/2;
		middleY = h/2;
	}
	
	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		init(holder);
		Canvas canvas = holder.lockCanvas();
		drawBackground(canvas);
		drawBeacon(MainActivity.beacons, canvas);
		holder.unlockCanvasAndPost(canvas);
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		// TODO Auto-generated method stub
	}
	
	private void drawBackground(Canvas canvas){
		canvas.drawColor(Color.rgb(0x33, 0x66, 0x33));
		
		//draw lines 
		Paint paint = new Paint();
		paint.setColor(Color.rgb(0x33, 0xff, 0x33));
		paint.setStrokeWidth(3);
		
		int i = 0;
		//draw the vertical lines
		do {
			canvas.drawLine(middleX+i*gridWidth, 0, middleX+i*gridWidth, h, paint);
			canvas.drawLine(middleX-i*gridWidth, 0, middleX-i*gridWidth, h, paint);
			i++;
		} while (middleX+i*gridWidth<w && middleX-i*gridWidth>0);
		
		//draw the horizontal lines
		int j = 0;
		do {
			canvas.drawLine(0, middleY+j*gridWidth, w, middleY+j*gridWidth, paint);
			canvas.drawLine(0, middleY-j*gridWidth, w, middleY-j*gridWidth, paint);
			j++;
		} while (middleY+j*gridWidth<h && middleY-j*gridWidth>0);
		
		Log.d(TAG, "The i and j is " + i + " " + j);
	}
	
	private void drawBeacons(Point[] beacons, Canvas canvas){
		Bitmap beaconBmp = BitmapFactory.decodeResource(context.getResources(), R.drawable.beacon_gray);
		int bmpW = beaconBmp.getWidth();
		int bmpH = beaconBmp.getHeight();
		double scale = bmpW > bmpH? bmpW/(double) gridWidth: bmpH/(double) gridWidth;
		
		beaconBmp = Bitmap.createScaledBitmap(beaconBmp, (int) (bmpW/scale), (int) (bmpH/scale), true);
		
		for(int i=0; i<beacons.length; i++){
			int[] pixelXY = convertCoordination(beacons[i].x, beacons[i].y, beaconBmp);
			Rect dirtyRect = new Rect();
			dirtyRect.left = pixelXY[0];
			dirtyRect.top = pixelXY[1];
			dirtyRect.right = dirtyRect.left + beaconBmp.getWidth();
			dirtyRect.bottom = dirtyRect.top + beaconBmp.getHeight();
			canvas.drawBitmap(beaconBmp, pixelXY[0], pixelXY[1], new Paint());
		}
	}
	
	private void drawLocation
	
	private int[] convertCoordination(int x, int y, Bitmap bitmap){
		int[] pixelXY = {0, 0};
		pixelXY[0] = middleX + x*gridWidth - bitmap.getWidth()/2;
		pixelXY[1] = middleY + y*gridWidth - bitmap.getHeight()/2;
		return pixelXY;
	}
}
